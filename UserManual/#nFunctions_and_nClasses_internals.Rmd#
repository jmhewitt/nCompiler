---
title: "Internals of nFunctions and nClasses"
output: html_document
---

```{r setup, include=FALSE}
dknitr::opts_chunk$set(echo = TRUE)
```

This document gives a quick tour of some of the internals of nFunctions and nClasses.  

```{r load-package}
library(nCompiler)
# Be sure to have done setup_nCompLocal() and restarted R after installing nCompiler
```

# `nFunction` internals

We'll use the same `nFunction` as introduced previously:
```{r mult2}
mult2 <- function(x) {
  ans <- 2 * x
  return(ans)
}

nf_mult2 <- nFunction(
  fun = mult2,
  argTypes = list(x = 'numericVector'),
  returnType = 'numericVector'
)
nf_mult2(1:3)
```

## `NF_internalsClass` 

An `nFunction` is an object of class `nFunction`, which inherits from `function`.  It has a slot for an object of class `NF_internalsClass`, where all information needed for compilation and management is held.  General accessors for this are `NFinternals` and `NFinternals<-`.

```{r nf_mult2_internals}
class(nf_mult2)                   # See the class label.
NFinternals(nf_mult2)             # See the NF_internalsClass object.
NFinternals(nf_mult2)$argSymTab   # See the symbol table for function arguments.
class(NFinternals(nf_mult2)$argSymTab)            # See that there is a class symbolTable.
NFinternals(nf_mult2)$argSymTab$getSymbolNames()  # Glimpse how a symbolTable can be used.
NFinternals(nf_mult2)$argSymTab$getSymbol("x")    # Glimpse how symbol objects are accessed.
NFinternals(nf_mult2)$returnSym   # See there is a symbol for the return type.
```

## Internals from compilation

Next we compile the `nFunction` and look at resulting objects.
```{r compile-mult2}
Cnf_mult2 <- nCompile(nf_mult2)
Cnf_mult2(1:3) # The compiled version works.
```

## The `RcppPacket`

A list with the text output components to be written to files and handed to a C++ compiler via Rcpp is called the `RcppPacket`.  After compilation, it is populated in the `NFinternals` of the `nFunction`.  The actual generated code can be found by default in `tempdir()`.
```{r}
NFinternals(nf_mult2)$RcppPacket
```

## The `NFcompiler` and `cppDef` objects

Next we look at objects used for all the processing to create the `RcppPacket` from the uncompiled `nFunction`.  To do so, we interrupt compilation at an intermediate step.  There is a moderately clearly defined set of compilation steps in the list `NFcompilerStages`.
```{r}
nCompiler:::NFcompilerStages
```

The control list argument used in compilation can set the end stage, which in some cases results in intermediate objects being returned for inspection and debugging.  This is done through the lower-level functions `nCompile_nFunction` or `nCompile_nClass`.  The user-facing function `nCompile` manages either or both of these for potentially multiple `nFunction` and/or `nClass` definitions in one call, whereas the lower-level functions handle one at a time.

There are a set of classes for representing C++ content that are collectively called "cppDefs".  A good stage for stopping compilation is `makeCppDef`, which results in an object of class `NF_CompilerClass` that contains an object of class `cpp_nFunctionClass`, which is the cppDef class for nFunctions.
```{r}
Cnf_compiler_object <- nCompile_nFunction(nf_mult2, control = list(endStage = 'makeCppDef'))
class(Cnf_compiler_object)   # See the class name NF_CompilerClass.
ls(Cnf_compiler_object)      # See its contents.
Cnf_compiler_object$cppDef   # See the cppDef it contains
Cnf_compiler_object$cppDef$generate()   # All cppDefs generate C++ code via generate()
# When compilation expands lines of code, they appear as nested lists, which writeCode collapses:
writeCode(Cnf_compiler_object$cppDef$generate(declaration=FALSE)) # default to definitions, for .cpp file 
writeCode(Cnf_compiler_object$cppDef$generate(declaration=TRUE))  # declarations, for .h file
```

## `cppCodeBlockClass` and `exprClass`

The cppDef object contains a `cppCodeBlockClass`, which represents a block of code with additional information like a symbol table and type definitions (for `typeDef` statements in C++).  

The actual block of code is an `exprClass` object.  `exprClass` objects are the building blocks at the heart of all code processing and transformation.  They are R6 objects arranged as doubly-linked lists.  Every node in the abstract syntax tree is represented by an `exprClass` object that has a list of its arguments (`exprClass` objects) and knows the `exprClass` object for which it is an argument as well as which argument it is.  The `exprClass` definition has a `print` method to show the parse tree via indentation.  

Here is a tour
```{r}
Cnf_compiler_object$cppDef$code # cppCodeBlockClass object
```

```{r}
Cnf_compiler_object$cppDef$code$code          # See exprClass for the code of the function body.
class(Cnf_compiler_object$cppDef$code$code)   # See its class.
ls(Cnf_compiler_object$cppDef$code$code)      # See its contents
codeStart <- Cnf_compiler_object$cppDef$code$code # These are reference objects, so it is not a copy
codeStart$args[[1]]$args[[1]]$args[[2]]       # Dig into the 2*x layer of the abstract syntax tree
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]        # x is...
class(codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]) #   an exprClass object
ls(codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]])    #   with some contents
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$name   #   whose name is "x"
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$isName #   and is known to be a name, not a call or a literal
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$type   #   and has a numeric type label
class(codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$type)  #    which is itself a symbol object
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$caller       #    and knows what is is called from
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[2]]$callerArgID  #    and which argument it is 
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[1]]        # 2 is an exprClass object....
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[1]]$name   #    whose name is the number 2
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[1]]$isLiteral  #    and is known to be a literal
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[1]]$type       #    with a numeric type label
codeStart$args[[1]]$args[[1]]$args[[2]]$args[[1]]$callerArgID #     and is the first argument to 2*x
codeStart$args[[1]]$args[[1]]$args[[2]]               # 2*x is an exprClass object....
codeStart$args[[1]]$args[[1]]$args[[2]]$name          #    whose name is "*"
codeStart$args[[1]]$args[[1]]$args[[2]]$isCall        #    and is known to be  call
codeStart$args[[1]]$args[[1]]$args[[2]]$type          #    with a numeric type label
codeStart$args[[1]]$args[[1]]$args[[2]]$caller        #    and is called from ans <- 2*x
codeStart$args[[1]]$args[[1]]$args[[2]]$callerArgID   #    and is the second argument of ans <- 2*x
codeStart$args[[1]]$args[[1]]           # ans <- 2*x is an exprClass object...
codeStart$args[[1]]$args[[1]]$name      #      whose name is "<-"
codeStart$args[[1]]$args[[1]]$isCall    #      and is a call
codeStart$args[[1]]$args[[1]]$type      #      with a numeric type label
codeStart$args[[1]]$args[[1]]$caller        #  ans is called from "{", whose arguments are lines of code
codeStart$args[[1]]$args[[1]]$callerArgID   #  ans is the first line of code of "{"}
codeStart$args[[1]]            # A code block "{...}", as in R, is like a function "{" with lines as arguments
codeStart$args[[1]]$name       
codeStart$args[[1]]$isCall
codeStart$args[[1]]$type       # Unlike R, there is no return object from "{"
```

### Parsing and deparsing from/to `exprClass` with `nParse` and `nDeparse`

`exprClass` objects are made and can be unmade using `nDeparse` and `nDeparse`.  These can convert to/from either an R code object or a character object.
```{r}
nCompiler:::nParse(quote(ans <- 2*x))
nCompiler:::nParse("ans <- 2*x")
codeStart$args[[1]]$args[[1]]
nCompiler:::nDeparse(codeStart$args[[1]]$args[[1]])
nCompiler:::nDeparse(codeStart$args[[1]]$args[[1]], toR = TRUE)
```

# `nClass` internals

Next we take a quick tour of `nClass` internals.  The `Cpublic` methods of `nClass` objects are `nFunction` objects.  (Currently there are no `Rprivate` or `Rpublic` fields, but someday there should be.)

We will use the same example as introduced previously.
```{r add_class}
add_class <- nClass(
  classname = "add_class",
  Rpublic = list(               # only available in R
     Rnumber = NULL,
     add_Rnumber = function(v) {
       v + Rnumber
     }
     # initialize method not supported through compilation yet.
  ),
  Cpublic = list(                # available in R or compiled version
    # field (aka member data) -- must have a type declaration
    Cnumber = 'numericScalar', 
    # method (aka member function) -- written as an nFunction
    add_Cnumber = nFunction(
      fun = function(v = numericVector()) {
        ans <- v + Cnumber
        return(ans)
      },
      returnType = 'numericVector')
  )
)
```

## `NC_CompilerClass`, `NCinternals`, and `cppDef` for `nClass`

Again we stop compilation after creating a "cppDef", this time of class `cpp_nClassClass`, which represents C++ for a class definition.  The name comes from being the R class representing a C++ nClass, hence the "nClassClass" label.
```{r compile-add-class}
Cnc_compiler_object <- nCompile_nClass(add_class, control = list(endStage = 'makeCppDef'))
Cnc_compiler_object                               # See the NC_CompilerClass label.
Cnc_compiler_object$cppDef                        # See the cpp_nClassClass object.
names(Cnc_compiler_object$cppDef$cppFunctionDefs) # It contains a list of cppDefs for its methods
Cnc_compiler_object$cppDef$cppFunctionDefs$add_Cnumber$code$code   # See the exprClass for its add_Cnumber method
writeCode(Cnc_compiler_object$cppDef$cppFunctionDefs$add_Cnumber$generate())  # See the C++ code for it.
# It also contains a method for instantiation of new objects:
writeCode(Cnc_compiler_object$cppDef$SEXPgeneratorDef$generate())
Cnc_compiler_object$cppDef$symbolTable            # It also contains a symbol table for C++ member data...
Cnc_compiler_object$cppDef$symbolTable$getSymbol("Cnumber")  # which in this case is Cnumber.
# It also contains a list of any cppDefs needed that are not part of the class itself
names(Cnc_compiler_object$cppDef$neededCppDefs)   
writeCode(Cnc_compiler_object$cppDef$neededCppDefs$macroCall$generate()) # This macro invokes the generic C++ interface.
```

We defer looking at the NCinternals until after completing compilation, which makes it more interesting.

## Full and generic interfaces

When a full interface is requested, a new R6 class definition is dynamically generated and returned.  We can use and inspect that like any R6 class.
```{r compile-add-class-generic}
# We can also make a generic interface (or get it out of the full interface).
Cadd_class_full <- nCompile(add_class, interfaces = c("full"))
obj <- Cadd_class_full$new()
class(Cadd_class_full)
obj
obj$add_Rnumber # A regular R method
obj$add_Cnumber # A method that calls C++
```

## `NCinternals`

Now that we have compiled the `nClass`, its internals are more interesting.  Similar to `NFinternals`, we have a utility `NCinternals` to access or modify the internal information of the class used for compilation and other needs.
```{r}
NCinternals(add_class)
lapply(NCinternals(add_class)$RcppPacket, writeLines)
NCinternals(add_class)$symbolTable
```

### The external pointer is stored in a `loadedObjectEnv`.

Inside of an `nClass` object must be a R external pointer to a C++ object.  It is helpful to store that in its own object to provide an extra layer of management of it.  That layer should be fast and light, so it is an environment with an S3 class tag of `loadedObjectEnv`.  The unexported function `getExtptr` accesses the actual external pointer object but  doesn't seem to be working in this document, perhaps due to namespace issues.
```{r}
obj$private$CppObj
is.environment(obj$private$CppObj)
obj$private$CppObj$extptr
```

## Generic interface

When we get a generic interface, it is just a `loadedObjectEnv`.
```{r}
Cadd_class_gen <- nCompile(add_class, interfaces = c("generic"))
# To access fields and methods in an object from the generic interface, 
# use value() and method()
gen_obj <- Cadd_class_gen() 
class(gen_obj)
```

Functions `value`, `value<-` and `method` use the external pointer and the C++ generic interface system that enables named access of member data and methods.
```{r, eval=TRUE}
gen_obj$extptr
```

