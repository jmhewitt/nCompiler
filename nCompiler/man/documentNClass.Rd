% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packaging.R
\name{documentNClass}
\alias{documentNClass}
\title{Produce a roxygen2 documentation text block for an nClass}
\usage{
documentNClass(
  obj = NULL,
  name,
  title,
  description = NULL,
  fields = list(),
  CMethodsDescriptions = list(),
  CMethodsParams = list(),
  otherRoxygen = NULL,
  headerComment = "#'",
  methodsComment = "#'",
  processWhitespace = TRUE,
  checkAgainstObj = TRUE
)
}
\arguments{
\item{obj}{The nClass generator being documented. Only required if
checkAgainstObj is TRUE, ignored otherwise.}

\item{name}{The nClass name. Used in the `@name` field of roxygen2
documentation.}

\item{title}{a descriptive title for the nClass. Used in the `@title` field
of roxygen2 documentation}

\item{description}{A text block giving a full and clear description of the
nClass. For use in the `@description` field of roxyygen2 documentation. If
processWhitespacpe is TRUE, any whitespace in the description will be
ignored and the code block will be reformatted for style.}

\item{fields}{A named list of documentation for C-ready public fields
belonging to the nClass. Fields are values stored internally by the class
and that are publicly accessible with `obj$field`. List names should
exactly match field names, while the elements of the list should be
character strings describing the field.}

\item{CMethodsDescriptions}{A named list of descriptions for the nClass's
methods. List names should exactly match method names, while the elements
of the list should be character strings describing the method.}

\item{CMethodsParams}{A named list of named lists. The names in
CMethodsParams should match exactly the names of the methods of the nClass.
Each element of CMethodsParams should itself be a named list, with names
matching parameters of the appropriate function, and elements being text
strings describing those parameters.}

\item{headerComment}{what string indicates the start of a roxygen comment for
the header? By default nCompiler packaging puts header comments for
nClasses in R, so the default value `#'` should almost always be kept.}

\item{methodsComment}{what string indicates the start of a roxygen comment
for the methods? By default nCompiler packaging puts methods comments for
nClasses in R, so the default value `#'` should almost always be kept.}

\item{processWhitespace}{Logical, default TRUE. Can whitespace be modified to
maintain style?}

\item{checkAgainstObj}{Logical, default TRUE. Should the input be compared
against the actual nClass generator to confirm that all elements have been
documented appropriately? (NOTE: not implemented yet, currently ignored)}
}
\description{
Builds out a text block in roxygen2 format given the inputs. The
  user provides the name, title, and description, as well as a named list of
  descriptions of fields and a named list of methods descriptions.
  Optionally, the function can process whitespace and perform a check against
  the nClass generator object, reporting whether all fields and methods were
  described.
}
\examples{
# Initialize an example nClass
foo <- nClass(
  classname = "foo",
  Cpublic = list(
    x = "numericScalar",
    cp1 = nFunction(fun = function(x = numericScalar()) {
      x <<- x
      ans <- x + 1
      return(ans)
      returnType(numericScalar())
    }))
)
# Create the roxygen
rox <- documentNClass(obj = foo, 
                      name  = "foo",
                      title = "A Test nClass",
                      description = "This nClass has a method to add 1 
                         to a scalar input, and has a field to store
                         that input.",
                      fields = list(x = "A scalar input."),
                      CMethodsDescriptions = list(cp1 = "Adds 1 to x."),
                      CMethodsParams = 
                        list(
                         cp1 = list(x = "A scalar to which 1 will be added.")
                        ),
                      methodsComment = "#'")
# Use the roxygen to write and build a package, which will include 
# documentation for foo
writePackage(foo,
             dir = tempdir(),
             package.name = "fooPackageWriteDocnFunction",
             roxygen = list(foo = rox))
buildPackage("fooPackageWriteDocnFunction", 
             dir = tempdir(), 
             roxygenize = TRUE)
?foo
}
\seealso{
For documenting nFunctions see \link{documentNFunction}. For
  nCompiler packaging tools see \link{writePackage}. To learn about roxygen
  documentation format see the package roxygen, e.g.
  \link[roxygen2]{roxygenize}.
}
