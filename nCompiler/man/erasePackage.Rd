% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packaging.R
\name{erasePackage}
\alias{erasePackage}
\title{Erase packages generated by `nCompiler`.}
\usage{
erasePackage(package.name, dir, nCompilerOnly = TRUE, uninstall = FALSE)
}
\arguments{
\item{package.name}{The name of the package to be erased}

\item{dir}{The directory containing the package to be erased}

\item{nCompilerOnly}{Logical, default TRUE. If TRUE, extra checks are
performed to make sure the target directory is a package generated by
nCompiler. If FALSE, checks are still performed to ensure the target looks
like a package.}

\item{unintall}{Logical, default FALSE. If TRUE, the package is uninstalled
as well as erased.}
}
\description{
Erases all files associated with a package written out by the
  `writePackage()` function in nCompiler.
}
\details{
\code{erasePackage} is a utility function for erasing a written
nCompiler-generated package. It is best thought of as the inverse of
\code{writePackage}, not \code{buildPackage}, as it is intended for use with
source code.

If called on a package directory, all contents of the package and the
directory itself will be deleted with \code{unlink}.

By default, \code{erasePackage} checks that the directory specified looks
like an R package. It simply looks to see if there is a DESCRIPTION file and
a NAMESPACE file in the directory. If not, \code{erasePackage} errors out.
This prevents accidental erasure of important directories.

If \code{nCompilerOnly} is \code{TRUE} (the default), the DESCRIPTION file
will be checked to make sure it looks like one autogenerated by
\code{writePackage}.
}
\examples{

# Initialize an example nFunction
foo <- nFunction(name = "foo",
                 fun = function(x = numericScalar()) {
                     ans <- x+1
                     return(ans)
                     returnType(numericScalar())
                 })
# Write a package containing the compiled nFunction "foo"
writePackage(foo,
             dir = tempdir(),
             package.name = "fooPackage",
             control = list(export = TRUE))
# Decide we don't want fooPackage after all and erase it.
erasePackage("fooPackage", dir = tempdir())
dir.exists(file.path(tempdir(), "fooPackage")) # FALSE

}
\seealso{
For other nCompiler packaging tools, see \code{\link{writePackage}}
  and \code{\link{buildPackage}}. For more info on deleting a directory see
  \code{\link[base]{unlink}}.
}
